---
import { BodyShort } from "@navikt/ds-react/cjs/typography/BodyShort.js";
import { dinOversiktUrl } from "./utils/urls";
import MicrofrontendCSR from "../../microfrontends/horizontal/MicrofrontendCSR";
import MicrofrontendSSR from "../../microfrontends/horizontal/MicrofrontendSSR.astro";
import Produktkort from "./produktkort/Produktkort";
import Meldekort from "./meldekort/Meldekort.astro";
import { getProduktkortList } from "../../utils/server/oversikt.ts";
import { produktText } from "./produktkort/ProduktText";
import { getShowDinOversikt } from "./utils/useOversikt.ts";
import { fetchData } from "../../utils/server/fetch";
import { getAudience, getOboToken } from "../../utils/server/token";
import { PersonalizedContent } from "../../microfrontends/horizontal/microfrontendTypes";
import ClientError from "../client-error/ClientError";
import type { Language } from "../../language/language";
import styles from "./DinOversikt.module.css";
import logger from "../../utils/server/logger";

interface Props {
  language: Language;
}

const audience = getAudience("meldekort-mikrofrontend");
const oboToken = await getOboToken(Astro.locals.token, audience);
const { language } = Astro.props;

let isError = false;
let personalizedContent: PersonalizedContent = {
  microfrontends: [],
  produktkort: [],
  dokumenter: [],
  meldekort: false,
  aktuelt: [],
  offerStepup: false,
};

try {
  personalizedContent = await fetchData(oboToken, dinOversiktUrl);
} catch (error: any) {
  logger.error(`Fetching din-oversikt failed. ${error.message}`);
  logger.error(`Error: ${error}`);
  isError = true;
}

const produktkortList = getProduktkortList(language, personalizedContent);
const showDinOversikt = getShowDinOversikt(personalizedContent, produktkortList);
---

{isError && <ClientError client:only="react" />}
{
  showDinOversikt && (
    <div class={styles.oversiktContainer}>
      <BodyShort as="h2" spacing>
        {produktText.oversiktTittel[language]}
      </BodyShort>
      {personalizedContent?.meldekort && (
        <div class={styles.meldekort}>
          <Meldekort language={language} server:defer />
        </div>
      )}
      <div class={styles.masonry}>
        {personalizedContent?.microfrontends.map((mf) => {
          if (mf.ssr) {
            return <MicrofrontendSSR microfrontend={mf} language={language} server:defer />;
          } else {
            return <MicrofrontendCSR client:only="react" manifestUrl={mf.url} key={mf.microfrontend_id} />;
          }
        })}
        {produktkortList?.map((produktConfig) => (
          <Produktkort produktConfig={produktConfig} key={produktConfig.tittel} />
        ))}
      </div>
    </div>
  )
}
