---
import pino from "pino-http";
import Dokument from "./dokument/Dokument.astro";
import ClientError from "../client-error/ClientError";
import { Language } from "../../language/language";
import { getAudience, getOboToken } from "../../utils/server/token";
import { fetchData } from "../../utils/server/fetch";
import { dokumentarkivUrl, dokumenterUrl } from "./dokumenterUrls";
import { BodyLong } from "@navikt/ds-react/cjs/typography/BodyLong.js";
import { BodyShort } from "@navikt/ds-react/cjs/typography/BodyShort.js";
import { Heading } from "@navikt/ds-react/cjs/typography/Heading.js";
import Chevron from "./Chevron.astro";
import { text } from "../../language/dokumenter";
import type { DokumentType } from "./dokumenterTypes";
import styles from "./Dokumenter.module.css";
import MinIDDokumenter from "./MinIDDokumenter.astro";
import PersonalContentLogger from "@components/legacy/PersonalContentLogger";

interface Props {
  language: Language;
}

const audience = getAudience("mine-saker-api");
const oboToken = await getOboToken(Astro.locals.token, audience);
const isSubstantial = Astro.locals.isSubstantial;
const logger = pino().logger;

let data: DokumentType[] = [];
let isError = false;

try {
  if (!isSubstantial) {
    data = await fetchData(oboToken, dokumenterUrl);
  }
} catch (error: any) {
  logger.error("Fetching dokumenter failed.", error.message);
  isError = true;
}

const hasIngenDokumenter = data.length === 0;
const { language } = Astro.props;
---

{isError && <ClientError client:only="react" />}
{
  isSubstantial ? (
    <MinIDDokumenter language={language} />
  ) : (
    <div class={styles.container}>
      {hasIngenDokumenter ? (
        <div class={styles.ingenContainer}>
          <div class={styles.ingenHeadingContainer}>
            <BodyShort as="h2">
              <strong>{text.heading[language]}</strong>
            </BodyShort>
          </div>
          <div class={styles.ingenIngressContainer}>
            <BodyLong className={styles.ingenText}>{text.ingenText[language]}</BodyLong>
          </div>
          <div class={styles.ingenContentContainer} />
          <a class={styles.ingenLink} href={`${dokumentarkivUrl}/${language}`} id="ingenDokumenterAlle">
            {text.tidligere[language]}
          </a>
        </div>
      ) : (
        <>
          <Heading size="xsmall" as="h2" spacing>
            {text.heading[language]}
          </Heading>
          <ul class={styles.dokumenter}>
            {data.map((dokument) => (
              <Dokument key={dokument.dokumentInfoId} dokument={dokument} />
            ))}
          </ul>
          <div class={styles.alle}>
            <a class={styles.link} href={`${dokumentarkivUrl}/${language}`} id="alle">
              <BodyShort size="medium">{text.alle[language]}</BodyShort>
            </a>
            <Chevron class={styles.chevron} aria-hidden={true} fontSize="20px" />
          </div>
        </>
      )}
    </div>
  )
}
<PersonalContentLogger event={"dokumenter"} value={hasIngenDokumenter ? false : true} client:only="react" />

<script>
  import { logEvent } from "@utils/client/amplitude";

  const harDokumenterAlle = document.querySelector("#alle");
  const ingenDokumenterAlle = document.querySelector("#ingenDokumenterAlle");

  harDokumenterAlle?.addEventListener("click", () => {
    logEvent("dokumentwidget", "widget", "Se alle dokumenter");
  });

  harDokumenterAlle?.addEventListener("click", () => {
    logEvent("dokumentwidget", "widget", "Se alle dokumenter");
  });
</script>
