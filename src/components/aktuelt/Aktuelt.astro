---
import MicrofrontendSSR from "../../microfrontends/horizontal/MicrofrontendSSR.astro";
import ClientError from "../client-error/ClientError";
import { getAudience, getOboToken } from "@utils/server/token";
import { BodyShort } from "@navikt/ds-react/cjs/typography/BodyShort.js";
import { text } from "@language/aktuelt.ts";
import { fetchData } from "@utils/server/fetch";
import type { Language } from "@language/language.ts";
import { Skeleton } from "@navikt/ds-react/cjs/skeleton/Skeleton.js";
import style from "./Aktuelt.module.css";
import logger from "@utils/server/logger.ts";
import { Aktuelt } from "./types";
import { aktueltUrl } from "./urls";

interface Props {
  language: Language;
}

const audience = getAudience("tms-mikrofrontend-selector");
const oboToken = await getOboToken(Astro.locals.token, audience);
const { language } = Astro.props;

let aktuelt: Aktuelt = { offerStepup: false, microfrontends: [] };
let isError = false;

try {
  aktuelt = await fetchData(oboToken, aktueltUrl);
} catch (error: any) {
  logger.error(`Fetching aktuelt failed. ${error.message}`);
  isError = true;
}
---

{isError && <ClientError client:only="react" />}
{
  aktuelt.microfrontends.length === 0 ? null : (
    <div class={style.container}>
      <BodyShort as="h2" className={style.aktuelt} spacing>
        {text.aktuelt[language]}
      </BodyShort>
      {aktuelt.microfrontends.map((mf) => {
        return (
          <MicrofrontendSSR microfrontend={mf} language={language} server:defer>
            <Skeleton variant="rounded" width={"100%"} height={100} slot="fallback" />
          </MicrofrontendSSR>
        );
      })}
    </div>
  )
}
