---
import pino from "pino-http";
import MicrofrontendCSR from "../../microfrontends/horizontal/MicrofrontendCSR.tsx";
import MicrofrontendSSR from "../../microfrontends/horizontal/MicrofrontendSSR.astro";
import ClientError from "../client-error/ClientError";
import { getAudience, getOboToken } from "../../utils/server/token";
import { BodyShort } from "@navikt/ds-react/cjs/typography/BodyShort.js";
import { PersonalizedContent } from "../../microfrontends/horizontal/microfrontendTypes.tsx";
import { text } from "@language/aktuelt.ts";
import { fetchData } from "../../utils/server/fetch";
import { dinOversiktUrl } from "../din-oversikt/utils/urls";
import type { Language } from "@language/language.ts";
import style from "./Aktuelt.module.css";

interface Props {
  language: Language;
}

const audience = getAudience("tms-mikrofrontend-selector");
const oboToken = await getOboToken(Astro.locals.token, audience);
const { language } = Astro.props;
const logger = pino().logger;

let isError = false;
let personalizedContent: PersonalizedContent = {
  microfrontends: [],
  produktkort: [],
  dokumenter: [],
  meldekort: false,
  aktuelt: [],
  offerStepup: false,
};

try {
  personalizedContent = await fetchData(oboToken, dinOversiktUrl);
} catch (error: any) {
  logger.error("Fetching din-oversikt for aktuelt failed.", error.message);
  isError = true;
}

const aktuelt = personalizedContent.aktuelt;
---

{isError && <ClientError client:only="react" />}
{
  aktuelt.length === 0 ? null : (
    <div class={style.container}>
      <BodyShort as="h2" className={style.aktuelt} spacing>
        {text.aktuelt[language]}
      </BodyShort>
      {aktuelt?.map((mf) => {
        if (mf.ssr) {
          return <MicrofrontendSSR microfrontend={mf} language={language} />;
        } else {
          return <MicrofrontendCSR key={mf.microfrontend_id} manifestUrl={mf.url} client:only="react" />;
        }
      })}
    </div>
  )
}
