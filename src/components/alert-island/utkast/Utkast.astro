---
import UtkastIkon from "./ikoner/UtkastIkon.tsx";
import UtkastIkonHover from "./ikoner/UtkastIkonHover.tsx";
import { getLanguage } from "@language/language";
import { fetchData } from "@utils/server/fetch";
import { getAudience, getOboToken } from "@utils/server/token";
import { utkastApiUrl, utkastUrl } from "./utkastUrls";
import ClientError from "../../client-error/ClientError";
import { MultiStatusError } from "@utils/server/error";
import { text } from "@language/utkast.ts";
import style from "./Utkast.module.css";
import logger from "@utils/server/logger";

const audience = getAudience("tms-utkast");
const oboToken = await getOboToken(Astro.locals.token, audience);

let data = { antall: 0 };
let isError = false;

try {
  data = await fetchData(oboToken, utkastApiUrl);
} catch (error: any) {
  if (error instanceof MultiStatusError) {
    data = error.partialContent;
  }

  logger.error(`Fetching utkast failed. ${error.message}`);
  isError = true;
}

const language = getLanguage(Astro.url);
const antall = data ? data.antall : 0;
const hasUtkast = antall > 0;
const ingress = antall === 1 ? text.soknad[language] : text.soknader[language](antall);
---

{isError && <ClientError client:only="react" />}
{
  hasUtkast && (
    <div class={style.wrapper} id="utkast">
      <a href={utkastUrl} class={style.utkast}>
        <div class={style.ikonRektangel}>
          <UtkastIkon />
          <UtkastIkonHover />
        </div>
        <div class={style.container}>
          <h3 class="navds-heading navds-heading--small">{text.utkast[language]}</h3>
          <p class="navds-body-long navds-body-long--small">{ingress}</p>
        </div>
      </a>
    </div>
  )
}
